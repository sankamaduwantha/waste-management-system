/**
 * @fileoverview Admin Payments Management Page
 * @description Interface for admins to view and manage all payments across the system
 */

import { useState, useEffect } from 'react';
import { 
  FaCreditCard, FaSearch, FaDownload, FaEye, FaCheckCircle, 
  FaTimesCircle, FaClock, FaSpinner, FaFileInvoice, FaFilter
} from 'react-icons/fa';
import api from '../../services/api';
import { showSuccessToast, showErrorToast, showInfoToast } from '../../components/common/ToastContainer';

const PaymentsManagement = () => {
  const [payments, setPayments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    status: '',
    search: '',
    startDate: '',
    endDate: '',
    paymentMethod: ''
  });
  const [selectedPayment, setSelectedPayment] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [showStatusModal, setShowStatusModal] = useState(false);
  const [newStatus, setNewStatus] = useState('');

  useEffect(() => {
    fetchPayments();
  }, [filters]);

  const fetchPayments = async () => {
    setLoading(true);
    try {
      const params = {};
      if (filters.status) params.status = filters.status;
      if (filters.paymentMethod) params.paymentMethod = filters.paymentMethod;
      if (filters.startDate) params.startDate = filters.startDate;
      if (filters.endDate) params.endDate = filters.endDate;

      const response = await api.get('/payments', { params });
      let paymentsData = response.data?.data?.payments || response.data?.data || response.data || [];
      
      // Ensure paymentsData is an array
      if (!Array.isArray(paymentsData)) {
        paymentsData = [];
      }

      // Client-side search filter
      if (filters.search) {
        paymentsData = paymentsData.filter(payment => 
          payment.user?.name?.toLowerCase().includes(filters.search.toLowerCase()) ||
          payment.user?.email?.toLowerCase().includes(filters.search.toLowerCase()) ||
          payment.transactionId?.toLowerCase().includes(filters.search.toLowerCase())
        );
      }

      setPayments(paymentsData);
    } catch (error) {
      console.error('Failed to fetch payments:', error);
      setPayments([]);
    } finally {
      setLoading(false);
    }
  };

  const viewPaymentDetails = async (payment) => {
    setSelectedPayment(payment);
    setShowModal(true);
  };

  const openStatusModal = (payment) => {
    setSelectedPayment(payment);
    setNewStatus(payment.status);
    setShowStatusModal(true);
  };

  const updatePaymentStatus = async () => {
    if (!newStatus || newStatus === selectedPayment.status) {
      showErrorToast('Please select a different status');
      return;
    }

    try {
      await api.patch(`/payments/${selectedPayment._id}/status`, {
        status: newStatus
      });

      showSuccessToast(`Payment status updated to ${newStatus.toUpperCase()}`);
      setShowStatusModal(false);
      fetchPayments();
    } catch (error) {
      console.error('Failed to update status:', error);
      showErrorToast(error.response?.data?.message || 'Failed to update payment status');
    }
  };

  const downloadInvoice = async (paymentId) => {
    try {
      const response = await api.get(`/payments/${paymentId}/invoice`);
      
      const invoiceData = response.data?.data?.invoice;
      
      if (!invoiceData) {
        showErrorToast('Invoice data not available');
        return;
      }

      // Create a simple text-based invoice (in real app, this would be a PDF)
      const invoiceText = `
INVOICE
================================================

Invoice Number: ${invoiceData.invoiceNumber || 'N/A'}
Transaction ID: ${invoiceData.transactionId || 'N/A'}
Date: ${invoiceData.date ? new Date(invoiceData.date).toLocaleDateString() : 'N/A'}

CUSTOMER DETAILS
------------------------------------------------
Name: ${invoiceData.user?.name || 'N/A'}
Email: ${invoiceData.user?.email || 'N/A'}
Phone: ${invoiceData.user?.phone || 'N/A'}

PAYMENT DETAILS
------------------------------------------------
Payment Type: ${invoiceData.paymentType || 'N/A'}
Payment Method: ${invoiceData.paymentMethod || 'N/A'}
Status: ${invoiceData.status || 'N/A'}

AMOUNT
------------------------------------------------
Total: Rs. ${invoiceData.amount?.toFixed(2) || '0.00'}

================================================
Generated by WasteHub Management System
      `.trim();

      // Create and download text file
      const blob = new Blob([invoiceText], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `invoice-${invoiceData.invoiceNumber || paymentId}.txt`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      
      showSuccessToast('Invoice downloaded successfully!');
    } catch (error) {
      console.error('Failed to download invoice:', error);
      showErrorToast(error.response?.data?.message || 'Failed to download invoice');
    }
  };

  const exportPayments = () => {
    try {
      // Convert payments to CSV
      const headers = ['Date', 'Transaction ID', 'Resident', 'Amount', 'Status', 'Payment Method'];
      const rows = payments.map(p => [
        new Date(p.createdAt).toLocaleDateString(),
        p.transactionId || 'N/A',
        p.user?.name || 'N/A',
        `Rs. ${p.amount?.toFixed(2) || '0.00'}`,
        p.status || 'N/A',
        p.paymentMethod || 'N/A'
      ]);

      const csvContent = [
        headers.join(','),
        ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
      ].join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `payments-${new Date().toISOString().split('T')[0]}.csv`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      
      showSuccessToast(`Successfully exported ${payments.length} payment${payments.length !== 1 ? 's' : ''} to CSV`);
    } catch (error) {
      console.error('Failed to export payments:', error);
      showErrorToast('Failed to export payments data');
    }
  };

  const getStatusBadge = (status) => {
    const styles = {
      completed: 'bg-green-100 text-green-800',
      pending: 'bg-yellow-100 text-yellow-800',
      failed: 'bg-red-100 text-red-800',
      refunded: 'bg-blue-100 text-blue-800'
    };

    const icons = {
      completed: <FaCheckCircle className="inline mr-1" />,
      pending: <FaClock className="inline mr-1" />,
      failed: <FaTimesCircle className="inline mr-1" />,
      refunded: <FaCheckCircle className="inline mr-1" />
    };

    return (
      <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${styles[status] || 'bg-gray-100 text-gray-800'}`}>
        {icons[status]}
        {status?.toUpperCase() || 'UNKNOWN'}
      </span>
    );
  };

  const stats = {
    total: payments.reduce((sum, p) => sum + (p.amount || 0), 0),
    completed: payments.filter(p => p.status === 'completed').reduce((sum, p) => sum + (p.amount || 0), 0),
    pending: payments.filter(p => p.status === 'pending').reduce((sum, p) => sum + (p.amount || 0), 0),
    count: payments.length,
    completedCount: payments.filter(p => p.status === 'completed').length,
    pendingCount: payments.filter(p => p.status === 'pending').length,
    failedCount: payments.filter(p => p.status === 'failed').length
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-6 flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 flex items-center">
            <FaCreditCard className="mr-3 text-primary-600" />
            Payments Management
          </h1>
          <p className="text-gray-600 mt-2">
            View and manage all payment transactions
          </p>
        </div>
        <button
          onClick={exportPayments}
          className="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 flex items-center"
        >
          <FaDownload className="mr-2" />
          Export CSV
        </button>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-white rounded-lg shadow p-4">
          <p className="text-sm text-gray-600">Total Revenue</p>
          <p className="text-2xl font-bold text-gray-900">Rs. {stats.total.toFixed(2)}</p>
          <p className="text-xs text-gray-500 mt-1">{stats.count} transactions</p>
        </div>
        <div className="bg-white rounded-lg shadow p-4">
          <p className="text-sm text-gray-600">Completed</p>
          <p className="text-2xl font-bold text-green-600">Rs. {stats.completed.toFixed(2)}</p>
          <p className="text-xs text-gray-500 mt-1">{stats.completedCount} payments</p>
        </div>
        <div className="bg-white rounded-lg shadow p-4">
          <p className="text-sm text-gray-600">Pending</p>
          <p className="text-2xl font-bold text-yellow-600">Rs. {stats.pending.toFixed(2)}</p>
          <p className="text-xs text-gray-500 mt-1">{stats.pendingCount} payments</p>
        </div>
        <div className="bg-white rounded-lg shadow p-4">
          <p className="text-sm text-gray-600">Failed</p>
          <p className="text-2xl font-bold text-red-600">{stats.failedCount}</p>
          <p className="text-xs text-gray-500 mt-1">transactions</p>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow p-4 mb-6">
        <div className="flex items-center mb-4">
          <FaFilter className="text-gray-600 mr-2" />
          <h3 className="text-lg font-semibold text-gray-900">Filters</h3>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              <FaSearch className="inline mr-2" />
              Search
            </label>
            <input
              type="text"
              placeholder="Name, email, or transaction ID..."
              value={filters.search}
              onChange={(e) => setFilters({ ...filters, search: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
            <select
              value={filters.status}
              onChange={(e) => setFilters({ ...filters, status: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
            >
              <option value="">All Status</option>
              <option value="completed">Completed</option>
              <option value="pending">Pending</option>
              <option value="failed">Failed</option>
              <option value="refunded">Refunded</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Payment Method</label>
            <select
              value={filters.paymentMethod}
              onChange={(e) => setFilters({ ...filters, paymentMethod: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
            >
              <option value="">All Methods</option>
              <option value="card">Card</option>
              <option value="bank">Bank Transfer</option>
              <option value="cash">Cash</option>
              <option value="mobile">Mobile Payment</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
            <input
              type="date"
              value={filters.startDate}
              onChange={(e) => setFilters({ ...filters, startDate: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">End Date</label>
            <input
              type="date"
              value={filters.endDate}
              onChange={(e) => setFilters({ ...filters, endDate: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500"
            />
          </div>
        </div>
        <div className="mt-4">
          <button
            onClick={() => setFilters({ status: '', search: '', startDate: '', endDate: '', paymentMethod: '' })}
            className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
          >
            Clear Filters
          </button>
        </div>
      </div>

      {/* Payments Table */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        {loading ? (
          <div className="flex items-center justify-center py-12">
            <FaSpinner className="animate-spin h-8 w-8 text-primary-600" />
            <span className="ml-3 text-gray-600">Loading payments...</span>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Date
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Transaction ID
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Resident
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Amount
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Method
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {payments.map((payment) => (
                  <tr key={payment._id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {new Date(payment.createdAt).toLocaleDateString()}
                      </div>
                      <div className="text-xs text-gray-500">
                        {new Date(payment.createdAt).toLocaleTimeString()}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-mono text-gray-900">
                        {payment.transactionId || 'N/A'}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {payment.user?.name || 'N/A'}
                      </div>
                      <div className="text-sm text-gray-500">
                        {payment.user?.email || 'N/A'}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-semibold text-gray-900">
                        Rs. {payment.amount?.toFixed(2) || '0.00'}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {payment.paymentMethod || 'N/A'}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(payment.status)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                      <button
                        onClick={() => viewPaymentDetails(payment)}
                        className="text-primary-600 hover:text-primary-900"
                        title="View Details"
                      >
                        <FaEye className="inline" />
                      </button>
                      <button
                        onClick={() => openStatusModal(payment)}
                        className="text-blue-600 hover:text-blue-900"
                        title="Change Status"
                      >
                        <FaClock className="inline" />
                      </button>
                      <button
                        onClick={() => downloadInvoice(payment._id)}
                        className="text-green-600 hover:text-green-900"
                        title="Download Invoice"
                      >
                        <FaFileInvoice className="inline" />
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {payments.length === 0 && (
              <div className="text-center py-12">
                <FaCreditCard className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-sm font-medium text-gray-900">No payments found</h3>
                <p className="mt-1 text-sm text-gray-500">Try adjusting your filters</p>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Payment Details Modal */}
      {showModal && selectedPayment && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75" onClick={() => setShowModal(false)} />
            
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-gray-900">Payment Details</h3>
                  <button onClick={() => setShowModal(false)} className="text-gray-400 hover:text-gray-600">
                    ×
                  </button>
                </div>
                
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm text-gray-500">Transaction ID</p>
                      <p className="font-mono font-medium">{selectedPayment.transactionId || 'N/A'}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Status</p>
                      {getStatusBadge(selectedPayment.status)}
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Amount</p>
                      <p className="font-semibold text-lg">Rs. {selectedPayment.amount?.toFixed(2) || '0.00'}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Payment Method</p>
                      <p className="font-medium">{selectedPayment.paymentMethod || 'N/A'}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Resident Name</p>
                      <p className="font-medium">{selectedPayment.user?.name || 'N/A'}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Email</p>
                      <p className="font-medium">{selectedPayment.user?.email || 'N/A'}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Date</p>
                      <p className="font-medium">{new Date(selectedPayment.createdAt).toLocaleString()}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Payment For</p>
                      <p className="font-medium">{selectedPayment.description || 'Waste Collection Service'}</p>
                    </div>
                  </div>

                  {selectedPayment.notes && (
                    <div>
                      <p className="text-sm text-gray-500">Notes</p>
                      <p className="text-sm text-gray-700 bg-gray-50 p-3 rounded">{selectedPayment.notes}</p>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  onClick={() => downloadInvoice(selectedPayment._id)}
                  className="w-full sm:w-auto px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700"
                >
                  <FaFileInvoice className="inline mr-2" />
                  Download Invoice
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Status Change Modal */}
      {showStatusModal && selectedPayment && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75" onClick={() => setShowStatusModal(false)} />
            
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-gray-900">Change Payment Status</h3>
                  <button onClick={() => setShowStatusModal(false)} className="text-gray-400 hover:text-gray-600">
                    ×
                  </button>
                </div>
                
                <div className="space-y-4">
                  <div>
                    <p className="text-sm text-gray-600 mb-2">
                      Transaction ID: <span className="font-mono font-semibold">{selectedPayment.transactionId}</span>
                    </p>
                    <p className="text-sm text-gray-600 mb-2">
                      Amount: <span className="font-semibold">Rs. {selectedPayment.amount?.toFixed(2)}</span>
                    </p>
                    <p className="text-sm text-gray-600 mb-4">
                      Current Status: {getStatusBadge(selectedPayment.status)}
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Select New Status
                    </label>
                    <select
                      value={newStatus}
                      onChange={(e) => setNewStatus(e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    >
                      <option value="">Select status...</option>
                      <option value="pending">Pending</option>
                      <option value="processing">Processing</option>
                      <option value="completed">Completed</option>
                      <option value="failed">Failed</option>
                      <option value="refunded">Refunded</option>
                      <option value="cancelled">Cancelled</option>
                    </select>
                  </div>

                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                    <p className="text-sm text-yellow-800">
                      <strong>Note:</strong> Changing the payment status will affect the payment record and may trigger automated processes.
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse gap-2">
                <button
                  onClick={updatePaymentStatus}
                  disabled={!newStatus || newStatus === selectedPayment.status}
                  className="w-full sm:w-auto px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                >
                  Update Status
                </button>
                <button
                  onClick={() => setShowStatusModal(false)}
                  className="w-full sm:w-auto mt-3 sm:mt-0 px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PaymentsManagement;
