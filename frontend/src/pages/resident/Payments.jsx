/**
 * @fileoverview Resident Payments Page
 * @description Payment history, bill payments, and invoice management for residents
 */

import { useState, useEffect } from 'react';
import { 
  FaCreditCard, FaHistory, FaDownload, FaFileInvoice, 
  FaCheckCircle, FaTimesCircle, FaClock, FaExclamationTriangle,
  FaMoneyBillWave, FaFilter, FaSearch, FaPlus, FaReceipt
} from 'react-icons/fa';
import api from '../../services/api';
import useAuthStore from '../../store/authStore';
import { showSuccessToast, showErrorToast, showInfoToast } from '../../components/common/ToastContainer';

const Payments = () => {
  const { user } = useAuthStore();
  const [payments, setPayments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedPayment, setSelectedPayment] = useState(null);
  
  // Payment form state
  const [paymentForm, setPaymentForm] = useState({
    amount: '',
    paymentType: 'monthly_fee',
    paymentMethod: 'card',
    description: ''
  });

  useEffect(() => {
    fetchPayments();
  }, []);

  const fetchPayments = async () => {
    try {
      setLoading(true);
      const response = await api.get('/payments/my-payments');
      
      const paymentsData = response.data?.data?.payments || [];
      setPayments(paymentsData);
    } catch (error) {
      console.error('Failed to fetch payments:', error);
      showErrorToast(error.response?.data?.message || 'Failed to load payment history');
    } finally {
      setLoading(false);
    }
  };

  const handleCreatePayment = async (e) => {
    e.preventDefault();
    
    if (!paymentForm.amount || parseFloat(paymentForm.amount) <= 0) {
      showErrorToast('Please enter a valid amount');
      return;
    }

    try {
      const response = await api.post('/payments/create-payment', {
        ...paymentForm,
        amount: parseFloat(paymentForm.amount)
      });

      showSuccessToast('Payment initiated successfully!');
      setShowPaymentModal(false);
      setPaymentForm({
        amount: '',
        paymentType: 'monthly_fee',
        paymentMethod: 'card',
        description: ''
      });
      fetchPayments();
    } catch (error) {
      console.error('Payment failed:', error);
      showErrorToast(error.response?.data?.message || 'Failed to process payment');
    }
  };

  const downloadInvoice = async (payment) => {
    try {
      showInfoToast('Downloading invoice...');
      
      const response = await api.get(`/payments/${payment._id}/invoice`);
      const invoiceData = response.data?.data?.invoice;
      
      if (!invoiceData) {
        showErrorToast('Invoice data not available');
        return;
      }

      // Create a simple text-based invoice
      const invoiceText = `
INVOICE
================================================

Invoice Number: ${invoiceData.invoiceNumber || 'N/A'}
Transaction ID: ${invoiceData.transactionId || 'N/A'}
Date: ${invoiceData.date ? new Date(invoiceData.date).toLocaleDateString() : 'N/A'}

CUSTOMER DETAILS
------------------------------------------------
Name: ${invoiceData.user?.name || 'N/A'}
Email: ${invoiceData.user?.email || 'N/A'}
Phone: ${invoiceData.user?.phone || 'N/A'}

PAYMENT DETAILS
------------------------------------------------
Payment Type: ${invoiceData.paymentType || 'N/A'}
Payment Method: ${invoiceData.paymentMethod || 'N/A'}
Status: ${invoiceData.status || 'N/A'}
${invoiceData.description ? `Description: ${invoiceData.description}` : ''}

AMOUNT
------------------------------------------------
Total: Rs. ${invoiceData.amount?.toFixed(2) || '0.00'}

================================================
Generated by WasteHub Management System
      `.trim();

      // Create and download text file
      const blob = new Blob([invoiceText], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `invoice-${invoiceData.invoiceNumber || payment._id}.txt`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      
      showSuccessToast('Invoice downloaded successfully!');
    } catch (error) {
      console.error('Failed to download invoice:', error);
      showErrorToast(error.response?.data?.message || 'Failed to download invoice');
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed':
        return <FaCheckCircle className="text-green-600" />;
      case 'pending':
        return <FaClock className="text-yellow-600" />;
      case 'failed':
        return <FaTimesCircle className="text-red-600" />;
      case 'processing':
        return <FaClock className="text-blue-600" />;
      default:
        return <FaExclamationTriangle className="text-gray-600" />;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'failed':
        return 'bg-red-100 text-red-800';
      case 'processing':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getPaymentTypeLabel = (type) => {
    const labels = {
      'monthly_fee': 'Monthly Fee',
      'bulk_pickup': 'Bulk Pickup',
      'late_fee': 'Late Fee',
      'bin_replacement': 'Bin Replacement',
      'other': 'Other'
    };
    return labels[type] || type;
  };

  const getPaymentMethodIcon = (method) => {
    switch (method) {
      case 'card':
        return '💳';
      case 'upi':
        return '📱';
      case 'net_banking':
        return '🏦';
      case 'wallet':
        return '👛';
      case 'cash':
        return '💵';
      default:
        return '💰';
    }
  };

  const filteredPayments = payments.filter(payment => {
    const matchesFilter = filter === 'all' || payment.status === filter;
    const matchesSearch = payment.transactionId?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         payment.description?.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesFilter && matchesSearch;
  });

  const stats = {
    total: payments.length,
    completed: payments.filter(p => p.status === 'completed').length,
    pending: payments.filter(p => p.status === 'pending').length,
    totalAmount: payments
      .filter(p => p.status === 'completed')
      .reduce((sum, p) => sum + p.amount, 0)
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading payments...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-gray-900 flex items-center mb-2">
          <FaCreditCard className="mr-3 text-green-600" />
          Payments
        </h1>
        <p className="text-gray-600">
          Manage your payments and view transaction history
        </p>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-white rounded-lg shadow-sm p-6 border-l-4 border-blue-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">Total Payments</p>
              <p className="text-2xl font-bold text-gray-900">{stats.total}</p>
            </div>
            <FaHistory className="text-3xl text-blue-500" />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6 border-l-4 border-green-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">Completed</p>
              <p className="text-2xl font-bold text-gray-900">{stats.completed}</p>
            </div>
            <FaCheckCircle className="text-3xl text-green-500" />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6 border-l-4 border-yellow-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">Pending</p>
              <p className="text-2xl font-bold text-gray-900">{stats.pending}</p>
            </div>
            <FaClock className="text-3xl text-yellow-500" />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6 border-l-4 border-purple-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600 mb-1">Total Paid</p>
              <p className="text-2xl font-bold text-gray-900">Rs. {stats.totalAmount.toFixed(2)}</p>
            </div>
            <FaMoneyBillWave className="text-3xl text-purple-500" />
          </div>
        </div>
      </div>

      {/* Action Bar */}
      <div className="bg-white rounded-lg shadow-sm p-4 mb-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
          {/* Search */}
          <div className="relative flex-1 max-w-md">
            <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search by transaction ID or description..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
            />
          </div>

          {/* Filter */}
          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2">
              <FaFilter className="text-gray-600" />
              <select
                value={filter}
                onChange={(e) => setFilter(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              >
                <option value="all">All Status</option>
                <option value="completed">Completed</option>
                <option value="pending">Pending</option>
                <option value="processing">Processing</option>
                <option value="failed">Failed</option>
              </select>
            </div>

            <button
              onClick={() => setShowPaymentModal(true)}
              className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center"
            >
              <FaPlus className="mr-2" />
              Make Payment
            </button>
          </div>
        </div>
      </div>

      {/* Payments List */}
      {filteredPayments.length === 0 ? (
        <div className="bg-white rounded-lg shadow-sm p-12 text-center">
          <FaReceipt className="text-gray-400 text-5xl mx-auto mb-4" />
          <h3 className="text-xl font-semibold text-gray-700 mb-2">No Payments Found</h3>
          <p className="text-gray-500 mb-4">
            {searchTerm || filter !== 'all' 
              ? 'No payments match your search criteria.' 
              : 'You haven\'t made any payments yet.'
            }
          </p>
          {!searchTerm && filter === 'all' && (
            <button
              onClick={() => setShowPaymentModal(true)}
              className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors"
            >
              Make Your First Payment
            </button>
          )}
        </div>
      ) : (
        <div className="space-y-4">
          {filteredPayments.map((payment) => (
            <div
              key={payment._id}
              className="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow p-6"
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center mb-2">
                    <span className="text-2xl mr-3">{getPaymentMethodIcon(payment.paymentMethod)}</span>
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">
                        {getPaymentTypeLabel(payment.paymentType)}
                      </h3>
                      <p className="text-sm text-gray-600">
                        Transaction ID: {payment.transactionId}
                      </p>
                    </div>
                  </div>

                  {payment.description && (
                    <p className="text-sm text-gray-600 mb-2">{payment.description}</p>
                  )}

                  {payment.billingPeriod && (
                    <p className="text-sm text-gray-500">
                      Billing Period: {new Date(payment.billingPeriod.startDate).toLocaleDateString()} - {new Date(payment.billingPeriod.endDate).toLocaleDateString()}
                    </p>
                  )}

                  <div className="flex items-center space-x-4 mt-3">
                    <span className="text-sm text-gray-500">
                      {new Date(payment.createdAt).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </span>
                    
                    <span className={`px-3 py-1 rounded-full text-xs font-semibold flex items-center ${getStatusColor(payment.status)}`}>
                      {getStatusIcon(payment.status)}
                      <span className="ml-1 capitalize">{payment.status}</span>
                    </span>
                  </div>
                </div>

                <div className="text-right ml-6">
                  <p className="text-2xl font-bold text-gray-900">
                    Rs. {payment.amount.toFixed(2)}
                  </p>
                  
                  {payment.invoice && payment.status === 'completed' && (
                    <button
                      onClick={() => downloadInvoice(payment)}
                      className="mt-3 text-sm text-green-600 hover:text-green-700 flex items-center justify-end"
                    >
                      <FaDownload className="mr-1" />
                      Download Invoice
                    </button>
                  )}
                  
                  {payment.status === 'pending' && (
                    <button
                      onClick={() => setSelectedPayment(payment)}
                      className="mt-3 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors text-sm"
                    >
                      Pay Now
                    </button>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Payment Modal */}
      {showPaymentModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-gray-900 flex items-center">
                <FaCreditCard className="mr-2 text-green-600" />
                Make Payment
              </h2>
              <button
                onClick={() => setShowPaymentModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ✕
              </button>
            </div>

            <form onSubmit={handleCreatePayment} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Payment Type
                </label>
                <select
                  value={paymentForm.paymentType}
                  onChange={(e) => setPaymentForm({ ...paymentForm, paymentType: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  required
                >
                  <option value="monthly_fee">Monthly Fee</option>
                  <option value="bulk_pickup">Bulk Pickup</option>
                  <option value="late_fee">Late Fee</option>
                  <option value="bin_replacement">Bin Replacement</option>
                  <option value="other">Other</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Amount (Rs.)
                </label>
                <input
                  type="number"
                  step="0.01"
                  min="0"
                  value={paymentForm.amount}
                  onChange={(e) => setPaymentForm({ ...paymentForm, amount: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  placeholder="Enter amount"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Payment Method
                </label>
                <select
                  value={paymentForm.paymentMethod}
                  onChange={(e) => setPaymentForm({ ...paymentForm, paymentMethod: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  required
                >
                  <option value="card">Credit/Debit Card</option>
                  <option value="upi">UPI</option>
                  <option value="net_banking">Net Banking</option>
                  <option value="wallet">Wallet</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description (Optional)
                </label>
                <textarea
                  value={paymentForm.description}
                  onChange={(e) => setPaymentForm({ ...paymentForm, description: e.target.value })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  rows="3"
                  placeholder="Add any notes about this payment"
                />
              </div>

              <div className="flex space-x-3 pt-4">
                <button
                  type="button"
                  onClick={() => setShowPaymentModal(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
                >
                  Proceed to Pay
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default Payments;
